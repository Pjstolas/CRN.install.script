#!/bin/bash

# Exit on any error
set -e

# Export locales to ensure predictable behavior
export LC_ALL=C
export LANG=C


# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'
UNDERLINE='\033[4m'

# Variables for user choices
configure_netplan=""
ipv4_address=""
ipv4_gateway=""
ipv6_address=""
ipv6_gateway=""
domain_name=""
ipv6_prefix=""
ipv6_subnet=""

# Function to get valid yes/no input
get_yes_no_input() {
    local prompt="$1"
    local default="$2"
    local answer=""
    
    while true; do
        read -r -p "$(echo -e "${YELLOW}${BOLD}$prompt ${NC}(y/n) [default: $default]: ")" answer
        answer=$(echo "$answer" | xargs)  # Trim whitespace
        answer=${answer:-$default}
        case "${answer,,}" in
            y|yes) echo "y"; return ;;
            n|no)  echo "n"; return ;;
            *) echo -e "${RED}Please enter 'y' or 'n'${NC}" ;;
        esac
    done
}

# Function to display script introduction
script_intro() {
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║               ${BLUE}${BOLD}Welcome to the Installer for ALEPH CRNs${NC}                 ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  ${BOLD}This script will guide you through the installation process.${NC}         ║"
    echo -e "║                                                                       ║"
    printf "║  ► Please follow the on-screen instructions carefully.                ║\n"
    printf "║  ► Some steps require user input.                                     ║\n"
    printf "║  ► Grab server IP's (v4/v6) and the subdomain you'll be using for ALEPH.║\n"
    printf "║  ► Set IPv6 gateway: It could be 2***:****::1 or a different one.     ║\n"
    echo -e "║                                                                       ║"
    printf "║  ${YELLOW}Press any key to start...${NC}                                            ║\n"
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo
    read -n 1 -s
    # Flush any remaining newline or stray characters
    read -r -t 0.1 -n 10000 discard || true
    echo
}

# Function to check if the script is run with sudo
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}Please run this script with sudo or as root.${NC}"
        exit 1
    fi
}

# Function to detect OS
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VERSION=$VERSION_ID
        echo -e "${BLUE}${BOLD}Detected OS: $OS $VERSION${NC}"
        
        case "$OS" in
            "Ubuntu")
                if [ "$VERSION_ID" != "22.04" ] && [ "$VERSION_ID" != "24.04" ]; then
                    echo "This script only supports Ubuntu 22.04 and 24.04"
                    exit 1
                fi
                ;;
            "Debian GNU/Linux")
                if [ "$VERSION_ID" != "12" ]; then
                    echo "This script only supports Debian 12"
                    exit 1
                fi
                ;;
            *)
                echo "This script only supports Ubuntu 22.04, Ubuntu 24.04, and Debian 12"
                exit 1
                ;;
        esac
    else
        echo "Cannot detect OS. Exiting..."
        exit 1
    fi
}

# Function to get Networking user preferences
get_user_preferences() {
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║                        ${BLUE}${BOLD}Network Configuration${NC}                          ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  Would you like to configure Netplan?                                 ║"
    echo -e "║                                                                       ║"
    printf "║  ► Netplan is normally used in ${GREEN}SERVER OS${NC} installations                ║\n"
    printf "║  ► NetworkManager is normally used in ${RED}DESKTOP OS${NC} installations        ║\n"
    echo -e "║                                                                       ║"
    printf "║  ${YELLOW}${BOLD}Choose:${NC}                                                              ║\n"
    printf "║    ${GREEN}[y]${NC} - Yes, configure Netplan (for servers OS)                      ║\n"
    printf "║    ${RED}[n]${NC} - No, skip Netplan, continue with default (for desktops)       ║\n"
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo

    configure_netplan=$(get_yes_no_input "Your choice:" "n")
    
    echo
    if [ "$configure_netplan" = "y" ]; then
        echo -e "${GREEN}Netplan configuration will be included in the setup.${NC}"
    else
        echo -e "${RED}Skipping Netplan configuration.${NC}"
    fi
    echo
}

# Function to get IP configuration with IPv6 prefix extraction
get_ip_config() {
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║                       ${BLUE}${BOLD}Network Configuration${NC}                           ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  Please enter your network details below.                             ║"
    echo -e "║  Press Enter to skip any field if you wish to configure it later.     ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  ${CYAN}${BOLD}IPv4 Configuration:${NC}                                                  ║"
    echo -e "║                                                                       ║"
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter IPv4 address with subnet (e.g., 123.134.1.145/24): ${NC}")" ipv4_address 
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter IPv4 gateway (e.g., 123.134.1.1): ${NC}")" ipv4_gateway
    echo -e "║                                                                       ║"
    echo -e "║  ${CYAN}${BOLD}IPv6 Configuration:${NC}                                                  ║"
    echo -e "║                                                                       ║"
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter IPv6 address with subnet (e.g., 2001:db8::100/64): ${NC}")" ipv6_address
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter IPv6 gateway (e.g., 2001:db8::1 or fe80::1): ${NC}")" ipv6_gateway
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo

    # Extract IPv6 prefix if an IPv6 address is provided
    ipv6_prefix=""
    if [ -n "$ipv6_address" ]; then
        # Extract the subnet length (e.g., /64) from the IPv6 address
        ipv6_subnet=$(echo "$ipv6_address" | grep -o '/[0-9]*$')
        
        # Extract the network part of the IPv6 address
        if [[ "$ipv6_address" =~ ^([0-9a-fA-F:]+):: ]]; then
            # For addresses with :: notation (like 2a03:cfc0:8000:0027::1/64)
            ipv6_prefix="${BASH_REMATCH[1]}::"
        elif [[ "$ipv6_address" =~ ^([0-9a-fA-F:]+:[0-9a-fA-F:]+):[0-9a-fA-F:]+/ ]]; then
            # For fully expanded addresses
            ipv6_prefix="${BASH_REMATCH[1]}::"
        fi
        
        if [ -n "$ipv6_prefix" ] && [ -n "$ipv6_subnet" ]; then
            echo -e "${GREEN}IPv6 prefix detected: ${ipv6_prefix}${ipv6_subnet}${NC}"
        fi
    fi

    if [ -n "$ipv4_address" ] || [ -n "$ipv6_address" ]; then
        echo -e "${GREEN}Network configuration will be applied with provided values.${NC}"
    else
        echo -e "${YELLOW}No IP addresses provided. You will need to configure this manually later.${NC}"
    fi
    echo
}

# Function to get domain configuration
get_domain_config() {
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║             ${BLUE}${BOLD}Domain Configuration${NC}                                      ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  This domain will be used in both supervisor.env and Caddyfile.       ║"
    echo -e "║  You can modify these later.                                          ║"
    echo -e "║                                                                       ║"
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter your domain name ${NC}(press Enter to skip): ")" domain_name
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo

    if [ -n "$domain_name" ]; then
        echo -e "${GREEN}Domain name set to: $domain_name${NC}"
    else
        echo -e "${YELLOW}No domain name provided. You will need to configure this manually later.${NC}"
    fi
    echo
}

# Function to update and upgrade the OS
update_upgrade() {
    echo "Updating and upgrading the system..."
    apt update
    apt upgrade -y
}

# Function to disable os logs 
rsyslog_disable() {
    systemctl disable rsyslog.service
}

# Function to install Docker and run vm-connector
install_docker_vmconnector() {
    echo "Installing Docker and running vm-connector..."
    case "$OS" in
        "Ubuntu"|"Debian GNU/Linux")
            apt install -y docker.io
            ;;
    esac
    docker run -d -p 127.0.0.1:4021:4021/tcp --restart=always --name vm-connector alephim/vm-connector:alpha
}

# Function to install aleph-vm
install_aleph_vm() {
    echo "Installing aleph-vm..."
    local package_name=""
    
    case "$OS" in
        "Ubuntu")
            if [ "$VERSION_ID" = "22.04" ]; then
                package_name="aleph-vm.ubuntu-22.04.deb"
            elif [ "$VERSION_ID" = "24.04" ]; then
                package_name="aleph-vm.ubuntu-24.04.deb"
            fi
            ;;
        "Debian GNU/Linux")
            if [ "$VERSION_ID" = "12" ]; then
                package_name="aleph-vm.debian-12.deb"
            fi
            ;;
    esac
    
    wget -P /opt https://github.com/aleph-im/aleph-vm/releases/download/1.4.1/${package_name}
    apt install -y /opt/${package_name}
}

# Function to install Caddy
install_caddy() {
    echo "Installing Caddy..."
    case "$OS" in
        "Ubuntu"|"Debian GNU/Linux")
            apt install -y debian-keyring debian-archive-keyring apt-transport-https
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
            apt update
            apt install -y caddy
            ;;
    esac
}

# Function to configure Caddy and aleph-vm with IPv6 prefix support
configure_caddy_aleph() {
    echo "Configuring Caddy and aleph-vm..."
    
    # Use domain name in Caddyfile if provided, otherwise keep placeholder
    local domain_placeholder="<---->"
    if [ -n "$domain_name" ]; then
        domain_placeholder="$domain_name"
    fi
    
    cat >/etc/caddy/Caddyfile <<EOL
{
    https_port 443
}

$domain_placeholder:443 {
    tls {
       on_demand
    }
    
    reverse_proxy http://127.0.0.1:4020 {
        # Forward Host header to the backend
        header_up Host {host}
    }
}
EOL

    # Prepare IPv6 address pool configuration
    local ipv6_pool_config="#ALEPH_VM_IPV6_ADDRESS_POOL=\"/64\""
    if [ -n "$ipv6_prefix" ] && [ -n "$ipv6_subnet" ]; then
        ipv6_pool_config="ALEPH_VM_IPV6_ADDRESS_POOL=\"${ipv6_prefix}${ipv6_subnet}\""
    fi

    cat >/etc/aleph-vm/supervisor.env <<EOL
ALEPH_VM_PRINT_SYSTEM_LOGS=True
#ALEPH_VM_USE_JAILER=True
ALEPH_VM_DOMAIN_NAME=$domain_name
ALEPH_VM_NETWORK_INTERFACE=ens18
ALEPH_VM_DNS_RESOLUTION=resolvectl
ALEPH_VM_IPV6_FORWARDING_ENABLED=True
${ipv6_pool_config}
ALEPH_VM_PAYMENT_RECEIVER_ADDRESS=""
#ALEPH_VM_ENABLE_GPU_SUPPORT=True
EOL
}

# Function to make network configuration persistent
configure_persistent_network() {
    echo "Making network configuration persistent..."
    
    # Disable cloud-init network management
    echo "network: {config: disabled}" > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    
    # Prepare addresses array for netplan
    local addresses=""
    if [ -n "$ipv6_address" ]; then
        addresses="            - $ipv6_address"
    fi
    if [ -n "$ipv4_address" ]; then
        if [ -n "$addresses" ]; then
            addresses="$addresses\n            - $ipv4_address"
        else
            addresses="            - $ipv4_address"
        fi
    fi
    
    # Prepare routes for netplan
    local routes=""
    if [ -n "$ipv4_gateway" ]; then
        routes="            - to: default\n              via: $ipv4_gateway"
    fi
    if [ -n "$ipv6_gateway" ]; then
        if [ -n "$routes" ]; then
            routes="$routes\n            - to: ::/0\n              via: $ipv6_gateway\n              on-link: true"
        else
            routes="            - to: ::/0\n              via: $ipv6_gateway\n              on-link: true"
        fi
    fi
    
    # Create persistent netplan configuration
    cat > /etc/netplan/01-netcfg.yaml <<EOL
network:
    renderer: networkd
    ethernets:
        ens18:
            dhcp4: no
            dhcp6: no
            addresses:
$(echo -e "$addresses")
            nameservers:
                addresses:
                - 8.8.8.8
                - 8.8.8.8
                - 2001:4860:4860::8888
                - 2001:4860:4860::8844
            routes:
$(echo -e "$routes")
    version: 2
EOL

    # Set correct permissions
    chmod 600 /etc/netplan/01-netcfg.yaml
    
    # Backup old cloud-init config
    mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak 2>/dev/null || true
    
    # Apply network configuration
    echo "Network configuration will be applied after reboot!"
    # Not applying netplan here, will be applied after reboot
}

# Function to display completion message
display_completion() {
    echo
    echo -e "${BLUE}${BOLD}Script installation complete!${NC}"
    if [ -z "$domain_name" ]; then
        echo -e "Please manually configure supervisor.env and Caddyfile ${YELLOW}${BOLD}(1)${NC}" 
    else
        echo -e "Domain name has been configured in supervisor.env and Caddyfile"
        echo -e "You can review and modify these files if needed ${YELLOW}${BOLD}(1)${NC}" 
    fi
    if [ "$configure_netplan" = "y" ] && [ -z "$ipv4_address" ] && [ -z "$ipv6_address" ]; then
        echo -e "Netplan configuration needs manual setup ${YELLOW}${BOLD}(2)${NC}"
    fi
    echo -e "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"
    echo -e "${YELLOW}${BOLD}(1) ►${NC} Use nano to edit '/etc/aleph-vm/supervisor.env' and '/etc/caddy/Caddyfile' with your domain and the network interface (default: ens18)"
    echo -e "${YELLOW}${BOLD}(2) ►${NC} Use nano to edit '/etc/netplan/01-netcfg.yaml' to configure your IPv4/IPv6 addresses and gateways." 
    echo -e "${YELLOW}${BOLD}(3) ►${NC} System will now reboot to apply all changes..."
    echo

    # Sleep for a moment to allow the user to read the message
    sleep 3
    
    # Schedule a reboot
    echo "Rebooting in 3 seconds..."
    sleep 1
    echo "Rebooting in 2 seconds..."
    sleep 1
    echo "Rebooting in 1 second..."
    sleep 1
    echo "Rebooting now!"
    /sbin/reboot
    
    # This ensures the script exits cleanly
    exit 0
}


# Function to configure hostname and hosts file
configure_hostname() {
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║                  ${BLUE}${BOLD}Hostname Configuration${NC}                              ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  Please enter the hostname for this machine.                          ║"
    echo -e "║  This will update /etc/hostname and /etc/hosts files.                 ║"
    echo -e "║                                                                       ║"
    read -r -p "$(echo -e "║  ${YELLOW}${BOLD}Enter hostname ${NC}(e.g., aleph-crn1): ")" hostname
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo
    
    if [ -z "$hostname" ]; then
        echo -e "${YELLOW}No hostname provided. Skipping hostname configuration.${NC}"
        return
    fi
    
    # Update /etc/hostname
    echo "$hostname" > /etc/hostname
    
    echo
    echo -e "╔═══════════════════════════════════════════════════════════════════════╗"
    echo -e "║                    ${BLUE}${BOLD}Hosts File Configuration${NC}                          ║"
    echo -e "╠═══════════════════════════════════════════════════════════════════════╣"
    echo -e "║  Do you want to add additional entries to /etc/hosts?                 ║"
    echo -e "║  Standard entries for localhost and your hostname will be added       ║"
    echo -e "║  automatically.                                                       ║"
    echo -e "╚═══════════════════════════════════════════════════════════════════════╝"
    echo
    
    #add_hosts=$(get_yes_no_input "Add additional hosts entries?" "n")
    
    # Prepare hosts file content
    local hosts_content="127.0.0.1 localhost\n127.0.1.1 $hostname\n\n"
    
    # Add IPv6 localhost entry
    hosts_content="${hosts_content}# The following lines are desirable for IPv6 capable hosts\n::1     ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n\n"
    
    # Add custom entries if requested
    #if [ "$add_hosts" = "y" ]; then
    #    echo -e "${YELLOW}${BOLD}Enter additional hosts entries (format: IP HOSTNAME), one per line.${NC}"
    #    echo -e "${YELLOW}${BOLD}Enter an empty line when done.${NC}"
    #    echo
    #    
    #    while true; do
    #        read -r -p "Host entry (or empty to finish): " host_entry
    #        if [ -z "$host_entry" ]; then
    #            break
    #        fi
    #        hosts_content="${hosts_content}${host_entry}\n"
    #    done
    #fi
    
    # If the domain name was provided, add it to hosts
    #if [ -n "$domain_name" ] && [ -n "$ipv4_address" ]; then
    #    local ip_without_subnet=$(echo "$ipv4_address" | cut -d'/' -f1)
    #    hosts_content="${hosts_content}# Entry for Aleph domain\n${ip_without_subnet} ${domain_name}\n"
    #fi
    
    # Write to /etc/hosts
    echo -e "$hosts_content" > /etc/hosts
    
    echo -e "${GREEN}Hostname set to: $hostname${NC}"
    echo -e "${GREEN}Hosts file has been updated.${NC}"
    echo
}



# Function to disable SSH and allow only a specific user
disable_ssh() {
    echo
    echo "Configuring SSH Security"
    echo "-------------------"
    
    # Prompt for the user to allow
    echo -e "${YELLOW}Enter the username to allow SSH access (leave blank to deny all)${NC}: "
    read -r allowed_user
    
    # Stop the SSH service (works for most distros)
    if command -v systemctl >/dev/null 2>&1; then
        systemctl stop ssh  # For systemd-based systems
        systemctl stop ssh.socket
        systemctl disable ssh  # Prevent it from starting on reboot
        systemctl disable ssh.socket
        echo -e "${GREEN}SSH service stopped and disabled.${NC}"
    elif command -v service >/dev/null 2>&1; then
        service ssh stop  # For older SysVinit systems
        echo -e "${GREEN}SSH service stopped.${NC}"
    else
        echo -e "${RED}Error: Could not determine how to stop SSH service.${NC}"
        return 1
    fi
    
    # Modify sshd_config to allow only the specified user (or deny all if blank)
    SSH_CONFIG="/etc/ssh/sshd_config"
    if [ -f "$SSH_CONFIG" ]; then
        # Backup the original config
        cp "$SSH_CONFIG" "$SSH_CONFIG.bak.$(date +%F-%T)"
        echo "Backed up $SSH_CONFIG to $SSH_CONFIG.bak.$(date +%F-%T)"

        # Add SSH hardening settings
        echo "DenyUsers root" >> "$SSH_CONFIG"
        echo "LoginGraceTime 2m" >> "$SSH_CONFIG"
        echo "PermitRootLogin no" >> "$SSH_CONFIG"
        echo "MaxAuthTries 2" >> "$SSH_CONFIG"
        echo "MaxSessions 1" >> "$SSH_CONFIG"
        echo -e "${GREEN}Added security settings to SSH config.${NC}"

        # Handle AllowUsers directive
        if [ -n "$allowed_user" ]; then
            echo "AllowUsers $allowed_user" >> "$SSH_CONFIG"
            echo -e "${GREEN}Updated $SSH_CONFIG to allow only '$allowed_user'.${NC}"
        else
            echo "DenyUsers *" >> "$SSH_CONFIG"
            echo -e "${GREEN}Updated $SSH_CONFIG to deny all users.${NC}"
        fi
    else
        echo -e "${YELLOW}Warning: $SSH_CONFIG not found. SSH service stopped but config not modified.${NC}"
    fi
    
    echo "-------------------"
    echo -e "${GREEN}SSH configured and disabled. Enhanced security applied.${NC}"
}



# Main execution
main() {
    check_sudo
    script_intro
    detect_os
    get_user_preferences
    
    if [ "$configure_netplan" = "y" ]; then
        get_ip_config
    fi
    
    get_domain_config
    configure_hostname
    disable_ssh
    update_upgrade
    rsyslog_disable
    install_docker_vmconnector
    install_aleph_vm
    install_caddy
    configure_caddy_aleph
    
    if [ "$configure_netplan" = "y" ]; then
        configure_persistent_network
    fi

    display_completion
}

# Run the main function
main
